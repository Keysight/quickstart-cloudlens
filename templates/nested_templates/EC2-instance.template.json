{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Nested Stack Template to deploy EC2 instance: Version 0.1. Copyright 2018  Keysight Technologies",
    "Parameters": {
        "ProjectKey": {
            "Type": "String",
            "Description": "Cloudlens project key"
        },
        "QuickStartIAMInstanceProfile": {
            "Type": "String",
            "Description": "EC2 IAM InstanceProfile"
        },
        "InstanceType": {
            "Type": "String",
            "Description": "EC2 IAM InstanceProfile"
        },
        "DefaultAMIId": {
            "Type": "String",
            "Description": "Default AMI Id"
        },
        "CustomAMIId" : {
            "Type": "String",
            "Description": "Custom AMI Id"
        },
        "CloudlensInstanceType" : {
            "Type": "String",
            "Description": "Specify if it is a tap or a tool instance"
        },
        "PrimaryAutoscaleSubnet": {
            "Type": "String",
            "Description": "Specify subnet for autoscaling group"
        },
        "SecondaryAutoscaleSubnet": {
            "Type": "String",
            "Description": "Specify subnet for autoscaling group"
        },
        "SecurityGroupId": {
            "Type": "String",
            "Description": "Security Group Id for the autoscaling groups"
        },
        "SSHKeyName" : {
            "Type": "String",
            "Description": "SSH key name"
        }
    },
    "Conditions": {
        "HasCustomAMIId": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "CustomAMIId"}]}]},
        "IsSourceInstance": {"Fn::Equals": ["CloudLens Quick Start Source Instance", {"Ref": "CloudlensInstanceType"}]},
        "IsDevAccount": {
            "Fn::Not": [
                {"Fn::Equals":[
                    { "Fn::Select" : [ "1", {
                        "Fn::Split": ["||", {
                            "Fn::Join":[
                                "",[
                                "dummyVar||",
                                {"Ref": "ProjectKey"}
                                ]
                            ]}
                        ]}
                    ]},
                    { "Ref": "ProjectKey"}
                ]}
            ]
        }
    },
    "Resources": {
        "InstanceAutoscaleGroup" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "Properties" : {
                "VPCZoneIdentifier" : [{ "Ref" : "PrimaryAutoscaleSubnet" }, { "Ref" : "SecondaryAutoscaleSubnet" }],
                "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
                "MinSize" : "1",
                "MaxSize" : "1",
                "Tags": [
                            {
                                "Key": "Name",
                                "Value": { "Ref": "CloudlensInstanceType" },
                                "PropagateAtLaunch" : "true"
                            },
                            {
                                "Key": "CreatedBy",
                                "Value": "CloudLens-QuickStart-Template",
                                "PropagateAtLaunch" : "true"
                            }
                        ]
            }
        },
        "LaunchConfig" : {
            "Type" : "AWS::AutoScaling::LaunchConfiguration",
            "Properties" : {
                "ImageId" : {"Fn::If": ["HasCustomAMIId", {"Ref": "CustomAMIId"}, {
                    "Ref": "DefaultAMIId"
                }]},
                "IamInstanceProfile": {
                    "Ref": "QuickStartIAMInstanceProfile"
                },
                "InstanceType": { "Ref" : "InstanceType" },
                "InstanceMonitoring": "false",
                "KeyName": { "Ref": "SSHKeyName" },
                "SecurityGroups" : [ { "Ref" : "SecurityGroupId" } ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -v",
                                "if [ -f /etc/lsb-release ]; then",
                                "sudo apt-get update -y",
                                "sudo apt-get -y install tcpreplay",
                                "sudo apt-get install -y docker.io",
                                "fi",
                                "if [ -f /etc/redhat-release ]; then",
                                "sudo rpm --import \"https://sks-keyservers.net/pks/lookup?op=get&search=0xee6d536cf7dc86e2d7d56f59a178ac6c6238f52e\"",
                                "sudo yum install -y yum-utils",
                                "sudo yum-config-manager --add-repo https://packages.docker.com/1.13/yum/repo/main/centos/7",
                                "sudo yum makecache fast",
                                "sudo yum install docker-engine",
                                "sudo systemctl enable docker.service",
                                "sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm",
                                "sudo yum -y install tcpreplay",
                                "fi",
                                "if [ -f /etc/os-release ]; then",
                                "sudo yum update -y",
                                "sudo yum -y install https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm",
                                "sudo yum -y install tcpreplay",
                                "",
                                "sudo yum install -y docker",
                                "sudo service docker start",
                                "fi",
                                {
                                    "Fn::If": ["IsSourceInstance", 
                                        {
                                            "Fn::Join": [
                                                "\n",
                                                [
                                                    "sudo ip link add name QsCloudlens type dummy",
                                                    "sudo ifconfig QsCloudlens up",
                                                    "wget https://s3.amazonaws.com/cloudlens-automation/quickstart/malware.pcap /",
                                                    "sudo tcpreplay --loop=0 --intf1=QsCloudlens /malware.pcap &"
                                                ]
                                            ]
                                        },
                                        ""
                                    ]
                                },
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "sudo docker run --name CloudLensQuickStart -v /:/host -v /var/run/docker.sock:/var/run/docker.sock -d --restart=always --net=host --privileged ixiacom/cloudlens-agent:latest --accept_eula y ",
                                            {
                                                "Fn::If": ["IsSourceInstance", 
                                                    "--listen QsCloudlens ",
                                                    ""
                                                ]
                                            },
                                            "--apikey ",
                                            {"Fn::If": ["IsDevAccount", {
                                                "Fn::Join": [
                                                    "",
                                                    [
                                                        { "Fn::Select" : [ "1", { "Fn::Split": ["||", {"Ref": "ProjectKey"}]}] },
                                                        " --server ",
                                                        { "Fn::Select" : [ "0", { "Fn::Split": ["||", {"Ref": "ProjectKey"}]}] }
                                                    ]
                                                ]},
                                                {"Ref": "ProjectKey"}
                                            ]}

                                        ]
                                    ]
                                },
                                ""
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs" : {}
}
